#double_char 
Given a string, return a string where for every char in the original, there are two chars.

Some Test Cases: 
double_char('The') → 'TThhee'
double_char('AAbb') → 'AAAAbbbb'
double_char('Hi-There') → 'HHii--TThheerree'

Solution: 
        def double_char(str):
          to_return =''
          for c in str: 
            to_return +=c*2
          return to_return
          
#count_hi 
Return the number of times that the string "hi" appears anywhere in the given string.

Some Test Cases: 
count_hi('abc hi ho') → 1
count_hi('ABChi hi') → 2
count_hi('hihi') → 2        
    
Solution: 
        def count_hi(str):
          count = 0 
          for i in range(len(str)):
            if str[i:i+2] =='hi':
              count +=1
          return count

#cat_dog 
Return True if the string "cat" and "dog" appear the same number of times in the given string.

Some Test Cases: 
cat_dog('catdog') → True
cat_dog('catcat') → False
cat_dog('1cat1cadodog') → True

Solution: 
        def cat_dog(str):
          cat_count , dog_count = 0, 0
          for i in range(len(str)):
            if str[i:i + 3] == 'cat':
              cat_count +=1
            else:
              if str[i:i + 3] == 'dog':
                dog_count +=1
          return cat_count == dog_count
          
#count_code 
Return the number of times that the string "code" appears anywhere in the given string, 
except we'll accept any letter for the 'd', so "cope" and "cooe" count.

Some Test Cases: 
count_code('aaacodebbb') → 1
count_code('codexxcode') → 2
count_code('cozexxcope') → 2

Solution: 
      def count_code(str):
        count = 0
        for i in range(len(str)):
          if len(str[i:i + 4]) == 4:
            if str[i:i+2] == 'co' and str[i+3]=='e':
              count +=1
        return count  
          
#end_other 
Given two strings, return True if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be "case sensitive"). Note: s.lower() returns the lowercase version of a string.

Some Test Cases: 
end_other('Hiabc', 'abc') → True
end_other('AbC', 'HiaBc') → True
end_other('abc', 'abXabc') → True

Solution: 
        def end_other(a, b):
         return a.lower() == b[-len(a):].lower() or b.lower() == a[-len(b):].lower()
         

# xyz_there 
Return True if the given string contains an appearance of "xyz" where the xyz is not directly preceeded by a period (.). 
So "xxyz" counts but "x.xyz" does not.

Some Test Cases: 
xyz_there('abcxyz') → True
xyz_there('abc.xyz') → False
xyz_there('xyz.abc') → True

Solution: 
        def xyz_there(str):
          ignore = False
          for i in range(len(str)):
            ignore = str[i] =='.'
            if not ignore and str[i:i+3] =='xyz' and str[i-1]!='.': 
              return True
          return False
  
  
