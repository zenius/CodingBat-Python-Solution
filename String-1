#hello_name 
Given a string name, e.g. "Bob", return a greeting of the form "Hello Bob!".

Some Test Cases: 
hello_name('Bob') → 'Hello Bob!'
hello_name('Alice') → 'Hello Alice!'
hello_name('X') → 'Hello X!'

Solution: 
        def hello_name(name):
          return 'Hello '+ name + '!'
          
#make_out_word 
Given an "out" string length 4, such as "<<>>", and a word, 
return a new string where the word is in the middle of the out string, e.g. "<<word>>".

Some Test Cases: 
make_out_word('<<>>', 'Yay') → '<<Yay>>'
make_out_word('<<>>', 'WooHoo') → '<<WooHoo>>'
make_out_word('[[]]', 'word') → '[[word]]'         

Solution: 
        def make_out_word(out, word):
          return out[:2]+ word + out[2:]


#first_half 
Given a string of even length, return the first half. So the string "WooHoo" yields "Woo".

Some Test Cases: 
first_half('WooHoo') → 'Woo'
first_half('HelloThere') → 'Hello'
first_half('abcdef') → 'abc'

Solution: 
        def first_half(str):
          return str[:len(str)//2]

#non_start 
Given 2 strings, return their concatenation, except omit the first char of each. The strings will be at least length 1.

Some Test Cases: 
non_start('Hello', 'There') → 'ellohere'
non_start('java', 'code') → 'avaode'
non_start('shotl', 'java') → 'hotlava'

Solution: 
        def non_start(a, b):
          return a[1:] + b[1:]
