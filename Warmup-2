#string_times 
Given a string and a non-negative int n, return a larger string that is n copies of the original string.

Some Test Cases: 
string_times('Hi', 2) → 'HiHi'
string_times('Hi', 3) → 'HiHiHi'
string_times('Hi', 1) → 'Hi'

Solution: 
        def string_times(str, n):
           return str*n

#string_splosion 
Given a non-empty string like "Code" return a string like "CCoCodCode".

Some Test Cases: 
string_splosion('Code') → 'CCoCodCode'
string_splosion('abc') → 'aababc'
string_splosion('ab') → 'aab'

Solution; 
        def string_splosion(str):
          to_return =''
          for i in range(len(str)):
            to_return += str[:i+1]
          return to_return

# array_front9 
Given an array of ints, return True if one of the first 4 elements in the array is a 9. 
The array length may be less than 4.

Some Test Cases: 
array_front9([1, 2, 9, 3, 4]) → True
array_front9([1, 2, 3, 4, 9]) → False
array_front9([1, 2, 3, 4, 5]) → False

Solution: 
        def array_front9(nums):
          end = len(nums)  # first figure the end of loops 
          if(end > 4):
             end  = 4
          for i in range(end): 
             if nums[i] == 9:
                return True 
           return False
           

