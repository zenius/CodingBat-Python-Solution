#string_times 
Given a string and a non-negative int n, return a larger string that is n copies of the original string.

Some Test Cases: 
string_times('Hi', 2) → 'HiHi'
string_times('Hi', 3) → 'HiHiHi'
string_times('Hi', 1) → 'Hi'

Solution: 
        def string_times(str, n):
           return str*n

#front_times 
Given a string and a non-negative int n, we'll say that the front of the string is the first 3 chars, or 
whatever is there if the string is less than length 3. Return n copies of the front;

Some Test Cases: 
front_times('Chocolate', 2) → 'ChoCho'
front_times('Chocolate', 3) → 'ChoChoCho'
front_times('Abc', 3) → 'AbcAbcAbc'

Solution: 
        def front_times(str, n):
            return str[:3]*n

#string_splosion 
Given a non-empty string like "Code" return a string like "CCoCodCode".

Some Test Cases: 
string_splosion('Code') → 'CCoCodCode'
string_splosion('abc') → 'aababc'
string_splosion('ab') → 'aab'

Solution; 
        def string_splosion(str):
          to_return =''
          for i in range(len(str)):
            to_return += str[:i+1]
          return to_return

#string_bits 
Given a string, return a new string made of every other char starting with the first, so "Hello" yields "Hlo".

Some Test Cases: 
string_bits('Hello') → 'Hlo'
string_bits('Hi') → 'H'
string_bits('Heeololeo') → 'Hello'

Solution: 
        def string_bits(str):
          result = ""
          size = len(str)
          for i in range(size): 
            if i % 2 == 0: 
              result +=str[i]
          return result

#array_front9 
Given an array of ints, return True if one of the first 4 elements in the array is a 9. 
The array length may be less than 4.

Some Test Cases: 
array_front9([1, 2, 9, 3, 4]) → True
array_front9([1, 2, 3, 4, 9]) → False
array_front9([1, 2, 3, 4, 5]) → False

Solution: 
        def array_front9(nums):
          end = len(nums)  # first figure the end of loops 
          if(end > 4):
             end  = 4
          for i in range(end): 
             if nums[i] == 9:
                return True 
           return False
      

#last2 
Given a string, return the count of the number of times that a substring length 2 appears in the string and 
also as the last 2 chars of the string, so "hixxxhi" yields 1 (we won't count the end substring).

Some Test Cases: 
last2('hixxhi') → 1
last2('xaxxaxaxx') → 1
last2('axxxaaxx') → 2

Solution: 
        def last2(str):
          count = 0
          size = len(str)-2
          for i in range(size):
            if str[i:i+2] == str[-2:]:
              count +=1
          return count
          

#array_count9 
Given an array of ints, return the number of 9's in the array.

Some Test Cases: 
array_count9([1, 2, 9]) → 1
array_count9([1, 9, 9]) → 2
array_count9([1, 9, 9, 3, 9]) → 3

Solution: 
        def array_count9(nums):
          count_9 = 0
          for num in nums:
            if num==9: 
              count_9 +=1
          return count_9

